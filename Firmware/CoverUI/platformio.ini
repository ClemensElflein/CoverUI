; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html


;****************************************************************************
; Some remarks:                                                             *
; - OM's original CoverUI is Pico-SDK based and get compiled via cmake/make *
; - Stock CoverUI is available in (yet) two MCU variants:                   *
;   STM32F030R8T6 and GD32F330R8T6 which differ in Cortex core, SysTick, ...*
;   The (yet) only (most) common framework which support both MCU's is      *
;   'arduino'. Unfortunately framework-arduino(ststm32|gd32) partly vary in *
;   API.                                                                    *
; - 'Semihosting' (printf() output via ST-Link debugger), is NOT yet        *
;   supported in arduino framework                                          *
; - GD32's CMSIS files do have a hardcoded clock selection which isn't      *
;   configurable and need to be modified in:                                *
;   <PIO home>/packages/framework-arduinogd32/system/GD32F3x0_firmware/     *
;   CMSIS/GD/GD32F3x0/Source/system_gd32f3x0.c#L45-L54 and switch to:       *
;   `#define __SYSTEM_CLOCK_84M_PLL_IRC8M_DIV2 ...`                         *
;   See extra_scripts script YardForce/util/apply_gd32f3x0_patches.py       *
;****************************************************************************

[platformio]
src_dir = .


[env]
platform = ststm32
framework = arduino

; Default build_src_filter for button- & led- board type models (without display)
build_src_filter =
  +<*>
  -<.git/>
  -<build/>
  -<buttonscan.cpp>
  -<LEDcontrol.cpp>
  -<statemachine.cpp>
  +<YardForce/>
  -<YardForce/Emergency.cpp>
  -<YardForce/Hatch.cpp>
  -<YardForce/subscription.cpp>
  -<YardForce/util/>
  -<YardForce/include/model/>
  -<YardForce/include/UC1698*>
  -<YardForce/Widget*>
  -<YardForce/old/>
  -<YardForce/assets/>

build_flags =
  -DHW_YF
  -DDEBUG_UART=NP

upload_protocol = stlink
debug_tool = stlink


;*********************************************
;*   YardForce Classic 500, STM32 Variants   *
;*********************************************

[env:YF_C500_STM32]
board = disco_f030r8
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_C500.*>
build_flags =
  ${env.build_flags}
  -DMCU_STM32
  -DMDL_C500

upload_flags =
  -f
  YardForce/util/stlink-stm.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-stm.cfg
  -c
  reset_config none separate



[env:YF_C500_STM32_RAIN]
board = disco_f030r8
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_C500.*>
  +<YardForce/Rain.*>
build_flags =
  ${env.build_flags}
  -DMCU_STM32
  -DMDL_C500
  -DMOD_RAIN

upload_flags =
  -f
  YardForce/util/stlink-stm.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-stm.cfg
  -c
  reset_config none separate



[env:YF_C500_STM32_RAIN_HALL]
board = disco_f030r8
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_C500.*>
  +<YardForce/Rain.*>
  +<YardForce/Emergency.*>
build_flags =
  ${env.build_flags}
  -DMCU_STM32
  -DMDL_C500
  -DMOD_RAIN
  -DMOD_EMERGENCY

upload_flags =
  -f
  YardForce/util/stlink-stm.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-stm.cfg
  -c
  reset_config none separate



[env:YF_C500_STM32_HALL]
board = disco_f030r8
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_C500.*>
  +<YardForce/Emergency.*>
build_flags =
  ${env.build_flags}
  -DMCU_STM32
  -DMDL_C500
  -DMOD_EMERGENCY

upload_flags =
  -f
  YardForce/util/stlink-stm.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-stm.cfg
  -c
  reset_config none separate



[env:YF_C500_STM32_X_Picoprobe]
board = disco_f030r8
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_C500.*>
  +<YardForce/Rain.*>
  +<YardForce/Emergency.*>
build_flags =
  ${env.build_flags}
  -DMCU_STM32
  -DMDL_C500
  -DMOD_RAIN_OFF
  -DMOD_EMERGENCY_OFF

; Need at least openocd 0.11 for working CMSIS-DAP adapter detection
platform_packages = platformio/tool-openocd@^2.1100.211028

; Picoprobe (RP2040) = CMSIS-DAP
upload_protocol = cmsis-dap
upload_flags =
  -f
  YardForce/util/picoprobe-stm.cfg

upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

; Picoprobe (RP2040) = CMSIS-DAP
debug_tool = cmsis-dap
debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/picoprobe-stm.cfg
  -c
  reset_config none separate


;********************************************
;*   YardForce Classic 500, GD32 Variants   *
;********************************************

[env:YF_C500_GD32]
platform = https://github.com/CommunityGD32Cores/platform-gd32.git
platform_packages = 
    framework-arduinogd32@https://github.com/CommunityGD32Cores/ArduinoCore-GD32.git
board = genericGD32F330R8
extra_scripts = pre:YardForce/util/apply_gd32f3x0_patches.py
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_C500.*>
build_flags =
  ${env.build_flags}
  -DMCU_GD32
  -DMDL_C500
  
upload_flags =
  -f
  YardForce/util/stlink-gd.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f3x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-gd.cfg
  -c
  reset_config none separate



[env:YF_C500_GD32_RAIN]
platform = https://github.com/CommunityGD32Cores/platform-gd32.git
platform_packages = 
    framework-arduinogd32@https://github.com/CommunityGD32Cores/ArduinoCore-GD32.git
board = genericGD32F330R8
extra_scripts = pre:YardForce/util/apply_gd32f3x0_patches.py
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_C500.*>
  +<YardForce/Rain.*>
build_flags =
  ${env.build_flags}
  -DMCU_GD32
  -DMDL_C500
  -DMOD_RAIN

upload_flags =
  -f
  YardForce/util/stlink-gd.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f3x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-gd.cfg
  -c
  reset_config none separate


[env:YF_C500_GD32_RAIN_HALL]
platform = https://github.com/CommunityGD32Cores/platform-gd32.git
platform_packages = 
    framework-arduinogd32@https://github.com/CommunityGD32Cores/ArduinoCore-GD32.git
board = genericGD32F330R8
extra_scripts = pre:YardForce/util/apply_gd32f3x0_patches.py
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_C500.*>
  +<YardForce/Rain.*>
  +<YardForce/Emergency.*>
build_flags =
  ${env.build_flags}
  -DMCU_GD32
  -DMDL_C500
  -DMOD_RAIN
  -DMOD_EMERGENCY

upload_flags =
  -f
  YardForce/util/stlink-gd.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f3x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-gd.cfg
  -c
  reset_config none separate



[env:YF_C500_GD32_HALL]
platform = https://github.com/CommunityGD32Cores/platform-gd32.git
platform_packages = 
    framework-arduinogd32@https://github.com/CommunityGD32Cores/ArduinoCore-GD32.git
board = genericGD32F330R8
extra_scripts = pre:YardForce/util/apply_gd32f3x0_patches.py
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_C500.*>
  +<YardForce/Emergency.*>
build_flags =
  ${env.build_flags}
  -DMCU_GD32
  -DMDL_C500
  -DMOD_EMERGENCY

upload_flags =
  -f
  YardForce/util/stlink-gd.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f3x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-gd.cfg
  -c
  reset_config none separate


;********************************************************************************
;*   YardForce SA/SC/NX Type, 10 Buttons, 12 LEDs (RM-ECOW-V100), STM32 Variants   *
;********************************************************************************

[env:YF_RM-ECOW-V100_STM32]
board = disco_f030r8
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_RM-ECOW-V100.*>
  +<YardForce/Hatch.*>
build_flags =
  ${env.build_flags}
  -DMCU_STM32
  -DMDL_RMECOWV100

upload_flags =
  -f
  YardForce/util/stlink-stm.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-stm.cfg
  -c
  reset_config none separate


[env:YF_RM-ECOW-V100_STM32_STOP]
board = disco_f030r8
build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_RM-ECOW-V100.*>
  +<YardForce/Hatch.*>
  +<YardForce/Emergency.*>
build_flags =
  ${env.build_flags}
  -DMCU_STM32
  -DMDL_RMECOWV100
  -DMOD_EMERGENCY

upload_flags =
  -f
  YardForce/util/stlink-stm.cfg
upload_command = openocd $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-stm.cfg
  -c
  reset_config none separate



;********************************************
;*   YardForce SAxPRO, STM32 Variants   *
;********************************************

[env:YF_SAXPRO_STM32]
board = disco_f030r8
board_upload.maximum_ram_size = 32768 ; STM32F030RCx has 32k SRAM
board_upload.maximum_size = 262144    ; STM32F030RCx has 256k Flash

build_src_filter =
  ${env.build_src_filter}
  +<YardForce/include/model/*_SAxPRO.*>
  +<YardForce/assets/*>
  +<YardForce/Widget*>
  +<YardForce/Hatch.cpp>
  +<YardForce/subscription.cpp>

build_flags =
  ${env.build_flags}
  -DMCU_STM32
  -DMDL_SAXPRO
  -DLV_CONF_INCLUDE_SIMPLE
  -DLV_LVGL_H_INCLUDE_SIMPLE
  -IYardForce ; Required by LVGL to find his lv_conf.h

lib_deps = lvgl/lvgl@^8.3.9

upload_flags = -f, target/stm32f0x.cfg
upload_command = openocd -f interface/stlink.cfg -c "transport select hla_swd" $UPLOAD_FLAGS -c "init; reset halt; stm32f0x unlock 0; reset run" -c "program {$SOURCE} verify reset; shutdown;"

debug_build_flags = -O0 -g -ggdb2
debug_server = 
  openocd
  -f
  YardForce/util/stlink-stm.cfg
  -c
  reset_config none separate
